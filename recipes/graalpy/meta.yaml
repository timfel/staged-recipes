# the graalpy version implies the gp_python_version and mx_version, so update these together
{% set version = "22.3.0" %}
{% set gp_python_version = "3.8.5" %}
{% set mx_version = "6.9.7" %}

# Keep increasing the build_num until we get a new graalpy version. Do not reset
{% set build_num = "0" %}

{% set python_maj_min = ".".join(gp_python_version.split(".")[:2]) %}
{% set graalpy_abi = "".join(version.split(".")[:2]) %}

package:
  name: graalpy-meta
  version: {{ version }}

# download graalpython and the mx build tool
source:
  - url: https://github.com/graalvm/mx/archive/refs/tags/{{ mx_version }}.zip
    sha256: 6719145418c9846fb75686190359c69018ac5e61af113aba35e8542fdf09e09c
    folder: mx
    patches:
      - patches/mx-keep-rpath-origin-variable.patch
  - url: https://github.com/oracle/graal/archive/refs/tags/vm-ce-{{ version }}.zip
    sha256: 9b714747fbff0b9f477a102a22e6558f697322d8fa89b1ac9956938d3afb3b87
    folder: graal
    patches:
      - patches/sulong-disable-tests.patch
      - patches/sulong-relative-rpath.patch
  - url: https://github.com/oracle/graalpython/archive/refs/tags/vm-ce-{{ version }}.zip
    sha256: 72ad9a6e8d8283425768c2838d9f360a42eb1dc6096d0efe44464f4fd5c0982c
    folder: graalpython
    patches:
      - patches/graalpy-honour-sysroot.patch

outputs:
  - name: python
    version: {{ gp_python_version }}
    build:
      number: {{ build_num }}
      string: {{ build_num }}_{{ graalpy_abi }}_graalpy
      track_features:
        - graalpy
      run_exports:
        weak:
          - graalpy >={{ version }}
          - python_abi {{ python_maj_min }} *_graalpy{{ graalpy_abi }}
        noarch:
          - {{ pin_subpackage("python", max_pin="x.x", min_pin="x.x") }}
    requirements:
      host:
        - graalpy {{ version }}
      run:
        - graalpy {{ version }}
        - python_abi {{ python_maj_min }} *_graalpy{{ graalpy_abi }}
    test:
      commands:
        - python --version
        - test $(python -c "import sys; print('.'.join(str(i) for i in sys.version_info[:3]))") == "{{ gp_python_version }}"  # [unix]
        - test $(python -c "import sys; print(sys.implementation.name)") == "graalpy"  # [unix]

  - name: hpy
    version: {{ hpy_version }}
    build:
      number: {{ build_num }}
      string: {{ build_num }}_graalpy
      noarch: generic
    requirements:
      run:
        - graalpy {{ version }}
        - python {{ gp_python_version }} {{ build_num }}_{{ graalpy_abi }}_graalpy
        - python_abi {{ python_maj_min }} *_graalpy{{ graalpy_abi }}
    test:
      commands:
        - test $(python -c "import hpy.universal; print(hpy.universal.get_version()[0])") == "{{ hpy_version }}"   # [unix]

  - name: graalpy
    version: {{ version }}
    build:
      number: {{ build_num }}
      skip: true  # [win or osx]
      script: build_graalpy.sh
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - python >=3.8
        - make
        - patch
        - zlib
        - git
        - curl
        - cmake
        - patchelf
      host:
        - zlib
      run:
        - libzlib
        - patch
        - curl
      run_constrained:
        - python {{ gp_python_version }} *_{{ graalpy_abi }}_graalpy

about:
    home: http://graalvm.org/python
    license: UPL-1.0
    license_file: LICENSE_GRAALPY.txt
    summary: >
        GraalPy is a high-performance Python implementation on GraalVM. See
        https://conda-forge.org/blog/posts/2020-03-10-pypy for more information
        about using it in conda, replacing PyPy/pypy/pp with GraalPy/graalpy/gp
        in commands.

extra:
  recipe-maintainers:
    - timfel
    - msimacek
